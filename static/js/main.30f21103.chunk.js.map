{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","protoTypes","PropTypes","number","isRequired","FeedbackOptions","options","onLeaveFeedback","Object","keys","map","key","type","onClick","object","App","state","event","currentTarget","textContent","setState","prevState","this","totalStatisticCount","Number","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIMA,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,sBAAKC,UAAU,mBAAf,UACE,4CAEA,uBAAMA,UAAU,YAAhB,mBAAmCL,KACnC,uBAAMK,UAAU,YAAhB,sBAAsCJ,KACtC,uBAAMI,UAAU,YAAhB,kBAAkCH,KAElC,gCACE,uBAAMG,UAAU,YAAhB,oBAAoCF,KACpC,uBAAME,UAAU,YAAhB,gCACsBD,EADtB,cAQRL,EAAWO,WAAa,CACtBN,KAAMO,IAAUC,OAAOC,WACvBR,QAASM,IAAUC,OAAOC,WAC1BP,IAAKK,IAAUC,OAAOC,YAGTV,QCzBTW,G,OAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKP,UAAU,UAAf,SACGQ,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC3B,wBAEEC,KAAK,SACLZ,UAAU,SACVa,QAASN,EAJX,SAMGI,GALIA,UAYfN,EAAgBJ,WAAa,CAC3BK,QAASJ,IAAUY,OAAOV,YAIbC,QCwCAU,G,0NA3DbC,MAAQ,CAAErB,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCU,gBAAkB,SAAAU,GAChB,IAAMN,EAAMM,EAAMC,cAAcC,YAEpB,SAARR,EACF,EAAKS,UAAS,SAAAC,GACZ,MAAO,CACL1B,KAAM0B,EAAU1B,KAAO,MAGV,YAARgB,EACT,EAAKS,UAAS,SAAAC,GACZ,MAAO,CACLzB,QAASyB,EAAUzB,QAAU,MAGhB,QAARe,GACT,EAAKS,UAAS,SAAAC,GACZ,MAAO,CACLxB,IAAKwB,EAAUxB,IAAM,O,4CAM7B,WAAS,MAEwByB,KAAKN,MAA5BrB,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IAEjB0B,EAAsBC,OAAO7B,GAAQ6B,OAAO5B,GAAW4B,OAAO3B,GAE9DE,EAAqB0B,KAAKC,MAC7BF,OAAO7B,GAAQ4B,EAAuB,KAGzC,OACE,qCACE,oBAAIvB,UAAU,QAAd,mCAEA,cAAC,EAAD,CACEM,QAASgB,KAAKN,MACdT,gBAAiBe,KAAKf,kBAGxB,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,EACPxB,mBAAoBA,W,GAnDZ4B,c,OCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.30f21103.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Statistics.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <div className=\"Statistics-block\">\r\n      <h1>Statistics</h1>\r\n\r\n      <span className=\"Statistic\">Good: {good}</span>\r\n      <span className=\"Statistic\">Neutral: {neutral}</span>\r\n      <span className=\"Statistic\">Bad: {bad}</span>\r\n\r\n      <div>\r\n        <span className=\"Statistic\">Total: {total}</span>\r\n        <span className=\"Statistic\">\r\n          Positive Feedback: {positivePercentage}%\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.protoTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './FeedbackOptions.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div className=\"Buttons\">\r\n      {Object.keys(options).map(key => (\r\n        <button\r\n          key={key}\r\n          type=\"button\"\r\n          className=\"Button\"\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {key}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.protoTypes = {\r\n  options: PropTypes.object.isRequired,\r\n  //   onLeaveFeedback: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  onLeaveFeedback = event => {\n    const key = event.currentTarget.textContent;\n\n    if (key === 'good') {\n      this.setState(prevState => {\n        return {\n          good: prevState.good + 1,\n        };\n      });\n    } else if (key === 'neutral') {\n      this.setState(prevState => {\n        return {\n          neutral: prevState.neutral + 1,\n        };\n      });\n    } else if (key === 'bad') {\n      this.setState(prevState => {\n        return {\n          bad: prevState.bad + 1,\n        };\n      });\n    }\n  };\n\n  render() {\n    // const { statistic } = this.state;\n    const { good, neutral, bad } = this.state;\n\n    const totalStatisticCount = Number(good) + Number(neutral) + Number(bad);\n\n    const positivePercentage = Math.round(\n      (Number(good) / totalStatisticCount) * 100,\n    );\n\n    return (\n      <>\n        <h1 className=\"Title\">Please leave feedback</h1>\n\n        <FeedbackOptions\n          options={this.state}\n          onLeaveFeedback={this.onLeaveFeedback}\n        ></FeedbackOptions>\n\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={totalStatisticCount}\n          positivePercentage={positivePercentage}\n        ></Statistics>\n\n        {/* <Section title=\"\"></Section> */}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}